{
  "name": "weather-gov-graph-parse",
  "description": "Parse weather graph data from weather.gov",
  "author": {
    "name": "Bryan Burgers",
    "email": "bryan@burgers.io",
    "url": "http://burgers.io"
  },
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "http://github.com/bryanburgers/weather-gov-graph-parse.git"
  },
  "main": "index.js",
  "license": {
    "type": "MIT",
    "url": "https://github.com/bryanburgers/weather-gov-graph-parse/blob/master/LICENSE.md"
  },
  "dependencies": {
    "htmlparser2": "~3.1.6",
    "request": "~2.27.0",
    "q": "~0.9.6"
  },
  "devDependencies": {
    "grunt": "~0.4",
    "grunt-contrib-jshint": "~0.1.1",
    "mocha": "~1.7",
    "should": "~1.2"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha"
  },
  "readme": "# weather.gov graph parser\r\n\r\nParse data from weather.gov's weather graph.\r\n\r\n[![Build Status](https://travis-ci.org/bryanburgers/weather-gov-graph-parse.png?branch=master)](https://travis-ci.org/bryanburgers/weather-gov-graph-parse)\r\n\r\n[![NPM](https://nodei.co/npm/weather-gov-graph-parse.png?compact=true)](https://npmjs.org/package/weather-gov-graph-parse)\r\n\r\n## Installation\r\n\r\n```\r\nnpm install weather-gov-graph-parse\r\n```\r\n\r\n## Usage\r\n\r\nRequire the module.\r\n\r\n```\r\nvar gp = require('weather-gov-graph-parse');\r\n```\r\n\r\nFetch and parse the weather graph.\r\n\r\n```\r\ngp(pos.latitude, pos.longitude, function(err, data) {\r\n\t// data is an array of data points\r\n});\r\n```\r\n\r\nOr fetch and parse the weather graph, promises style.\r\n\r\n```\r\ngp(pos.latitude, pos.longitude).then(function(data) {\r\n\t// data is an array of data points\r\n});\r\n```\r\n\r\n## Data\r\n\r\nThe `data` variable that is returned is an array of data points. Each data\r\npoint has the following structure. All fields are always present unless\r\notherwise noted.\r\n\r\n```\r\n{\r\n\t// The date of the prediction data point.\r\n\tdate: [date]\r\n\r\n\t// The predicted temperature.\r\n\ttemperature: number\r\n\r\n\t// The predicted dew point.\r\n\tdewPoint: number\r\n\r\n\t// The predicted heat index, if available. This may be 'null' if no heat\r\n\t// index is available. The weather.gov weather graph assumes that if no\r\n\t// heat index is available, it is the same as the temperature.\r\n\theatIndex: number\r\n\r\n\t// The predicted wind speed.\r\n\twindSpeed: number\r\n\r\n\t// The predicted wind direction. This will be either 'N', 'NNE', 'NE',\r\n\t// 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW',\r\n\t// 'NW', or 'NNW'\r\n\twindDirection: string\r\n\r\n\t// The maximum predicted wind gusts, if available. This may be 'null' if\r\n\t// no gusts are predicted.\r\n\tgust: number\r\n\r\n\t// The predicted sky cover, in percent. This will be between 0 and 100.\r\n\tskyCover: number\r\n\r\n\t// The predicted precipitation potential. This will be between 0 and 100.\r\n\tprecipitation: number\r\n\r\n\t// The predicted relative humidity. This will be between 0 and 100.\r\n\trelativeHumidity: number\r\n}\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bryanburgers/weather-gov-graph-parse/issues"
  },
  "homepage": "https://github.com/bryanburgers/weather-gov-graph-parse",
  "_id": "weather-gov-graph-parse@0.1.2",
  "dist": {
    "shasum": "e0bfbffb5830cdd09ea122ba98ad57b3276978bd"
  },
  "_from": "weather-gov-graph-parse@0.1.2",
  "_resolved": "https://registry.npmjs.org/weather-gov-graph-parse/-/weather-gov-graph-parse-0.1.2.tgz"
}
